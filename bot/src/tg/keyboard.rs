use super::*;
use db::ArgDay;
use url::Url;

pub const CD_DELIMETER: char = ':';

// menu identifier
#[derive(Debug, Default, PartialEq, Clone, Copy)]
pub enum MenuCode {
    #[default]
    ChooseDay,
    MainMenu,
    Cinemas,
    MovielistFromCinema,
    MovielistDefault,
    PinnedMovie,
}

impl MenuCode {
    pub fn check_complience(self, code: MenuCode) -> Res<()> {
        if self != code {
            Err(Box::new(io::Error::new(io::ErrorKind::Other, "Invalid MenuCode number")))
        } else {
            Ok(())
        }
    }
}

impl TryFrom<i32> for MenuCode {
    type Error = ();

    fn try_from(v: i32) -> Result<Self, Self::Error> {
        use MenuCode::*;
        match v {
            x if x == MainMenu as i32 => Ok(MainMenu),
            x if x == Cinemas as i32 => Ok(Cinemas),
            x if x == MovielistFromCinema as i32 => Ok(MovielistFromCinema),
            x if x == MovielistDefault as i32 => Ok(MovielistDefault),
            x if x == ChooseDay as i32 => Ok(ChooseDay),
            x if x == PinnedMovie as i32 => Ok(PinnedMovie),
            _ => Err(()),
        }
    }
}

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–æ–π —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–Ω–æ–ø–∫–∏ (–ù–∞–∑–∞–¥, –í–ø–µ—Ä–µ–¥, –ó–∞–∫—Ä—ã—Ç—å –∏ —Ç.–¥)
#[derive(Debug, PartialEq, Clone, Copy)]
pub enum ButtonOption {
    // –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å
    Day = -100,
    // –í—Å–µ —Ñ–∏–ª—å–º—ã
    Movies,
    // –ü–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—É
    Cinemas,
    // –ù–∞–∑–∞–¥
    Back,
    // –í–ø–µ—Ä–µ–¥
    Forward,
    // –ù–∞–∑–∞–¥ (–≤–≤–µ—Ä—Ö, –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é)
    Up,
    // –ó–∞–∫—Ä—ã—Ç—å
    Close,
    //
    Sessions,
    // TODO
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–µ –∏—Å–ø.)
    Pages,
    // TODO
    // (–Ω–µ –∏—Å–ø.)
    NotSetted,
}

impl TryFrom<i32> for ButtonOption {
    type Error = ();

    fn try_from(v: i32) -> Result<Self, Self::Error> {
        use ButtonOption::*;
        match v {
            x if x == Movies as i32 => Ok(Movies),
            x if x == Cinemas as i32 => Ok(Cinemas),
            x if x == Back as i32 => Ok(Back),
            x if x == Forward as i32 => Ok(Forward),
            x if x == Up as i32 => Ok(Up),
            x if x == Close as i32 => Ok(Close),
            x if x == Pages as i32 => Ok(Pages),
            x if x == Sessions as i32 => Ok(Sessions),
            _ => Err(()),
        }
    }
}

pub fn keyboard_day() -> InlineKeyboardMarkup {
    let today = ArgDay::get_date(ArgDay::Today);
    let tommorow = ArgDay::get_date(ArgDay::Tommorow);
    let aftertommorow = ArgDay::get_date(ArgDay::Aftertommorow);

    let callback_data = format!("{}{}{}", MenuCode::ChooseDay as i32, CD_DELIMETER, today.format("%Y.%m.%d"));
    let button_1 = InlineKeyboardButton::callback("–°–µ–≥–æ–¥–Ω—è", callback_data);

    let text = format!("{}", tommorow.format_localized("%A ‚Ä¢ %d.%m", chrono::Locale::ru_RU));
    let callback_data = format!("{}{}{}", MenuCode::ChooseDay as i32, CD_DELIMETER, tommorow.format("%Y.%m.%d"));
    let button_2 = InlineKeyboardButton::callback(text, callback_data);

    let text = format!("{}", aftertommorow.format_localized("%A ‚Ä¢ %d.%m", chrono::Locale::ru_RU));
    let callback_data = format!("{}{}{}", MenuCode::ChooseDay as i32, CD_DELIMETER, aftertommorow.format("%Y.%m.%d"));
    let button_3 = InlineKeyboardButton::callback(text, callback_data);

    let callback_data = format!("{}{}{}", MenuCode::ChooseDay as i32, CD_DELIMETER, ButtonOption::Close as i32);
    let button_4 = InlineKeyboardButton::callback("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data);

    InlineKeyboardMarkup::new(vec![vec![button_1], vec![button_2, button_3], vec![button_4]])
}

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
// | –í—Å–µ —Ñ–∏–ª—å–º—ã | –ü–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—É |
// |       ‚ùå –ó–∞–∫—Ä—ã—Ç—å           |
pub fn keyboard_main() -> InlineKeyboardMarkup {
    let callback_data = format!("{}{}{}", MenuCode::MainMenu as i32, CD_DELIMETER, ButtonOption::Movies as i32);
    let button_1 = InlineKeyboardButton::callback("–í—Å–µ —Ñ–∏–ª—å–º—ã", callback_data);

    let callback_data = format!("{}{}{}", MenuCode::MainMenu as i32, CD_DELIMETER, ButtonOption::Cinemas as i32);
    let button_2 = InlineKeyboardButton::callback("–ü–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—É", callback_data);

    let callback_data = format!("{}{}{}", MenuCode::MainMenu as i32, CD_DELIMETER, ButtonOption::Close as i32);
    let button_3 = InlineKeyboardButton::callback("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data);

    let callback_data = format!("{}{}{}", MenuCode::MainMenu as i32, CD_DELIMETER, ButtonOption::Up as i32);
    let button_4 = InlineKeyboardButton::callback("Ô∏è–ù–∞–≤–µ—Ä—Ö ‚¨Ü", callback_data);

    InlineKeyboardMarkup::new(vec![vec![button_1, button_2], vec![button_3, button_4]])
}

// –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞
// |  –ë–µ—Ä–µ–∑–∫–∞   |  –í—ã–º–ø–µ–ª  |
// |   –ò—Å–∫—Ä–∞    |  –ö–æ—Å–º–æ—Å  |
// |         –°–∞—Ç—É—Ä–Ω        |
// | ‚ùå –ó–∞–∫—Ä—ã—Ç—å | –ù–∞–≤–µ—Ä—Ö ‚¨Ü |
pub fn keyboard_cinemas(cinemas: Vec<Cinema>) -> InlineKeyboardMarkup {
    let buttons: Vec<InlineKeyboardButton> = cinemas
        .iter()
        .map(|cinema| {
            let callback_data = format!("{}{}{}", MenuCode::Cinemas as i32, CD_DELIMETER, cinema.id);

            InlineKeyboardButton::callback(cinema.name.to_owned(), callback_data)
        })
        .collect();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤
    let mut keyboard: Vec<Vec<InlineKeyboardButton>> = buttons.chunks(2).map(|buttons_row| buttons_row.to_vec()).collect();

    let callback_data = format!("{}{}{}", MenuCode::Cinemas as i32, CD_DELIMETER, ButtonOption::Close as i32);
    let button_1 = InlineKeyboardButton::callback("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data);

    let callback_data = format!("{}{}{}", MenuCode::Cinemas as i32, CD_DELIMETER, ButtonOption::Up as i32);
    let button_2 = InlineKeyboardButton::callback("Ô∏è–ù–∞–≤–µ—Ä—Ö ‚¨Ü", callback_data);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.push(vec![button_1, button_2]);

    InlineKeyboardMarkup::new(keyboard)
}

// –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º–∞
// | –§–æ—Ä–µ—Å—Ç –ì–∞–º–ø (1994) |
// | –®–æ—É –¢—Ä—É–º–∞–Ω–∞ (1998) |
// | –õ–µ–æ–Ω (1994)        |
// | ‚¨ÖÔ∏è | ‚û° | 1 –∏–∑ 9 | ‚¨Ü |
pub fn keyboard_movielist(movies: Vec<MovieShort>, menu_code: MenuCode, page: i64, total_pages: i64) -> InlineKeyboardMarkup {
    let buttons: Vec<InlineKeyboardButton> = movies
        .iter()
        // .flat_map(|m| {
        .map(|m| {
            let callback_data_1 = format!("{}{}{}", menu_code as i32, CD_DELIMETER, m.id);
            // let callback_data_2 = format!("{}{}{}", menu_code as i32, CD_DELIMETER, m.id);
            //  üóì
            // vec![
            InlineKeyboardButton::callback(&m.title, callback_data_1)
            // InlineKeyboardButton::callback(" üóì", callback_data_2),
            // ]
        })
        .collect();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤
    let mut keyboard: Vec<Vec<InlineKeyboardButton>> = buttons.chunks(1).map(|buttons_row| buttons_row.to_vec()).collect();

    let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Back as i32);
    let button_1 = InlineKeyboardButton::callback("‚¨ÖÔ∏è", callback_data);

    let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Forward as i32);
    let button_2 = InlineKeyboardButton::callback("‚û°Ô∏è", callback_data);

    let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Pages as i32);
    let button_3 = InlineKeyboardButton::callback(format!("{} –∏–∑ {}", page, total_pages), callback_data);

    let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Up as i32);
    let button_4 = InlineKeyboardButton::callback("Ô∏è‚¨Ü", callback_data);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.push(vec![button_1, button_2, button_3, button_4]);

    InlineKeyboardMarkup::new(keyboard)
}

// –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '–í—Å–µ —Ñ–∏–ª—å–º—ã', –∫–æ–≥–¥–∞ –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –≤ –ø—Ä–æ–∫–∞—Ç–µ
// | –û–∫ üòî |
// pub fn keyboard_ok(menu_code: MenuCode) -> InlineKeyboardMarkup {
//     let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Close as i32);
//     let button_1 = InlineKeyboardButton::callback("üòî –û–∫", callback_data);
//     InlineKeyboardMarkup::new(vec![vec![button_1]])
// }

// –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '–ü–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—É', –∫–æ–≥–¥–∞ —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞ –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –≤ –ø—Ä–æ–∫–∞—Ç–µ
// –∏–ª–∏ –∫–æ–≥–¥–∞ –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
// | –û–∫ üòî | ‚¨ÜÔ∏è –ù–∞–≤–µ—Ä—Ö |
pub fn keyboard_ok_or_up(menu_code: MenuCode) -> InlineKeyboardMarkup {
    let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Close as i32);
    let button_1 = InlineKeyboardButton::callback("üòî –û–∫", callback_data);

    let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Up as i32);
    let button_2 = InlineKeyboardButton::callback("Ô∏è–ù–∞–≤–µ—Ä—Ö ‚¨Ü", callback_data);
    InlineKeyboardMarkup::new(vec![vec![button_1, button_2]])
}

// TODO
// –û–∫ | [–ö–∏–Ω–æ–ø–æ–∏—Å–∫ (link)] | –ú–æ—Å–∫–∏–Ω–æ üóì
pub fn keybord_movie_links(href_mk: Option<&str>, href_kp: Option<&str>, menu_code: MenuCode) -> InlineKeyboardMarkup {
    let mut keyboard: Vec<InlineKeyboardButton> = vec![];

    let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Close as i32);
    let button_1 = InlineKeyboardButton::callback("üåù –û–∫", callback_data);
    keyboard.push(button_1);

    let callback_data = format!("{}{}{}", menu_code as i32, CD_DELIMETER, ButtonOption::Sessions as i32);
    let button_2 = InlineKeyboardButton::callback("üóì", callback_data);
    keyboard.push(button_2);

    if let Some(mk) = href_mk {
        let parsed = Url::parse(mk).unwrap();
        let button_3 = InlineKeyboardButton::url("–ú–æ—Å–∫–∏–Ω–æ", parsed);
        keyboard.push(button_3);
    }

    if let Some(kp) = href_kp {
        let parsed = Url::parse(kp).unwrap();
        let button_4 = InlineKeyboardButton::url("–ö–∏–Ω–æ–ø–æ–∏—Å–∫", parsed);
        keyboard.push(button_4);
    }

    let keyboard: Vec<Vec<InlineKeyboardButton>> = keyboard.chunks(2).map(|b| b.to_vec()).collect();
    InlineKeyboardMarkup::new(keyboard)
}
